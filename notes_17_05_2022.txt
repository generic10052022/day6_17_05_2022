/* public class Resource{

 public static int getMonth(String month){

   switch(month){
    case "Jan" : return 1;
    case "Feb" : return 2;
    default : return 0;

    }
 }

} */

 public class Resource{

 public static int getMonth(String month){
     int monthNumber=-1;
   switch(month){
    case "Jan" : monthNumber=1;
                 break;
    case "Feb" : monthNumber=2;
                 break;
    default :    monthNumber=0;

    }
   return monthNumber;
 }

} 

public ResourceMain{
   public static void main(String args[]){
    String monthName="Jan";
    //Resource res=new Resource();
    int monthNumber=Resource.getMonth(monthName);
    System.out.println(monthNumber);

   }

 }  
-----------------------------------------------------------------------------------------------------

Q We have seen how we can create an array of String objects. Is it possible to create objects for the userdefined classes like Employee/Student/Book etc?
Ans Yes .


 public class Employee {
   private int id;
   private String name;
   private String cityNames[];

   // setters/getters
 }

 public class EmployeeMain {
   public static void main(String args[]) {

  }
}
------------------------------------------------------------------------------------
Enter the details for two Employees 

 public class Employee {
   private int id;
   private String name;
   private String cityNames[];

   // setters/getters
 }

 public class EmployeeMain {
   public static void main(String args[]) {
    Employee emp1=new Employee();
    Employee emp2=new Employee();
  }
}
----------------------------------------------------------------------------------------------

 public class Employee {
   private int id;
   private String name;
   private String cityNames[];

   // setters/getters
 }

import java.util.Scanner;

public class EmployeeMain {
   public static void main(String args[]) {
   Employee employees[]=new Employee[2];  // We have created two reference variables to store two objects
   Scanner scan=new Scanner(System.in);
   String cityNames[]=new String[2];
   // of employee class 
   // int num[]=new int[2];
   // String str[]=new String[2];
   for(int i=0;i<employees.length;i++)
   {
	   System.out.println("Enter the id for the employee");
	   //int id=scan.nextInt();
	   // employees[i].setId(id);
	   employees[i].setId(scan.nextInt());
	  
	   System.out.println("Enter the name");
	   employees[i].setName(scan.next());
	   for(int j=0;j<cityNames.length;j++)
	   {
		   System.out.println("Enter the city name");
		   cityNames[j]=scan.next();
	   }
       employees[i].setCityNames(cityNames);
   
   }
   
  
  }
}


[ Enter the id for the employee
1
Exception in thread "main" java.lang.NullPointerException: Cannot invoke "Employee.setId(int)" because "employees[i]" is null
	at EmployeeMain.main(EmployeeMain.java:16)
]
-----------------------------------------------------------
The correct code:----

public class Employee {
   private int id;
   private String name;
   private String cityNames[];
public int getId() {
	return id;
}
public void setId(int id) {
	this.id = id;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String[] getCityNames() {
	return cityNames;
}
public void setCityNames(String[] cityNames) {
	this.cityNames = cityNames;
}

   // setters/getters
 }


import java.util.Scanner;

public class EmployeeMain {
   public static void main(String args[]) {
   Employee employees[]=new Employee[2];  // We have created two reference variables to store two objects
   Scanner scan=new Scanner(System.in);
   String cityNames[]=new String[2];
   // of employee class 
   // int num[]=new int[2];
   // String str[]=new String[2];
   for(int i=0;i<employees.length;i++)
   {
	   employees[i]=new Employee();
	   System.out.println("Enter the id for the employee");
	   //int id=scan.nextInt();
	   // employees[i].setId(id);
	   employees[i].setId(scan.nextInt());
	  
	   System.out.println("Enter the name");
	   employees[i].setName(scan.next());
	   for(int j=0;j<cityNames.length;j++)
	   {
		   System.out.println("Enter the city name");
		   cityNames[j]=scan.next();
	   }
       employees[i].setCityNames(cityNames);
   
   }
   for(Employee emp : employees)
   {
	   System.out.println(emp.getId());
	   System.out.println(emp.getName());
	   //System.out.println(emp.getCityNames());
       cityNames=emp.getCityNames();
       for(String cityName : cityNames)
       {
    	   System.out.println(cityName);
       }
   }
   
   
   
  
  }
}


-------------------------------------------------------------
Student class with 2 student objects, subjects will be same for all the 
students. make use of constructors,setters and getters and static method/static
members wherever required. Add a method called calculateAverage. which will
display the average score for the 3 subjects. 


public class Student {
 private int roll;
 private String name;
 private static String subjects[];
 private int marks[];

static {
/*   subjects=new String[3]{"English","Maths",Science"}; // Compilation error because we cannot provide the size for the array , if we are initialising it at the same time. */
  /* subjects=new String[3];
  subjects[0]="English";
  subjects[1]="Maths";
  subjects[2]="Science";
  The above 4 lines are correct for declaring and initialising */
  subjects[]=new String[]{"English","Maths","Science"}'
  /* The above line is correct for declaring and initialising the String array. */

  }

  // setters/getters methods

  void averageCalculate(){

   }

}

import java.util.Scanner;

public class StudentMain{
   public static void main(String args[]){
    Student students[]=new Student[2];
    Scanner scan=new Scanner(System.in);
   

 }
}

Where we find the difference between instance variables, static variables and local variables.

---------------------------------------------------------------------------------------------------------------Aggregation which is also known as Has-a relationship. 


Department is having a Manager.
public class Employee1{
private String empName;
private String empId;
private long contactNo;
private String address;
public String getEmpName() {
	return empName;
}
public void setEmpName(String empName) {
	this.empName = empName;
}
public String getEmpId() {
	return empId;
}
public void setEmpId(String empId) {
	this.empId = empId;
}
public long getContactNo() {
	return contactNo;
}
public void setContactNo(long contactNo) {
	this.contactNo = contactNo;
}
public String getAddress() {
	return address;
}
public void setAddress(String address) {
	this.address = address;
}

//setters/getters

}

public class Department {
private int deptId;
private String deptName;
private Employee1 manager;
public int getDeptId() {
	return deptId;
}
public void setDeptId(int deptId) {
	this.deptId = deptId;
}
public String getDeptName() {
	return deptName;
}
public void setDeptName(String deptName) {
	this.deptName = deptName;
}
public Employee1 getManager() {
	return manager;
}
public void setManager(Employee1 manager) {
	this.manager = manager;
}

//setters/getters

}

public class EmployeeDepartmentMain1 {
   public static void main(String args[]){
    Employee1 employee=new Employee1();
    Department dept=new Department();
    employee.setEmpId("E0001");
    employee.setEmpName("Gajendra");
    employee.setContactNo(9834533441L);
    employee.setAddress("A/122 Netaji Nagar Delhi");
    dept.setDeptId(1);
    dept.setDeptName("stores");
    dept.setManager(employee);
    System.out.println(dept.getDeptId());
    System.out.println(dept.getDeptName());
    System.out.println(dept.getManager()); // You wont be able to read the employeeDetails Employee1@cac736f
    employee=dept.getManager();
    System.out.println(employee.getEmpId());
    System.out.println(employee.getEmpName());
    System.out.println(employee.getContactNo());
    System.out.println(employee.getAddress());
   }
}  
----------------------------------------------------------------------------------------  
Design a class Person with instance variables age,name and address. Name will be a class with firstName,
middleName and lastName. Address will be a class with hno, streetName, locality, city, State.
public class Name {
  private String firstName;
  private String middleName;
  private String lastName;
  
  // setters/getters

}
public class Address{
  private String hno; // A/22
  prvate String streetName;
  private String locality;
  private String city;
  // setters/getters
}
public class Person  {
  private int age;
  private Name name;
  private Address address;
 // setters/getters
}

public class PersonMain {
   public static void main(String args[]) {

   }
}
  
---------------------------------------------------------------------------------------------------
A person can have 2 addresses. 
public class Name1 {
  private String firstName;
  private String middleName;
  private String lastName;
  
  // setters/getters

}



public class Person1  {
  private int age;
  private Name1 name;
  private Address1 address[];
 // setters/getters
}

public class Address1{
  private String hno; // A/22
  prvate String streetName;
  private String locality;
  private String city;
  // setters/getters
}


public class PersonMain1 {
   public static void main(String args[]) {
      Address1 address[]=new Address1[2];
      Person1 person=new Person1();
      Name1 name=new Name1();
      address[0]=new Address1();
      address[0].setHno("A/22");
      address[0].setStreetName("Park Street");
      address[0].setLocality("Central Kolkata");
      address[0].setCity("Kolkata");
      address[1]=new Address1();
      address[1].setHno("111");
      address[1].setStreetName("Jawahar Street");
      address[1].setLocality("Hind market");
      address[1].setCity("Srinagar");
      name.setFirstName("Raman");
      name.setMiddleName("Kumar");
      name.setLastName("Verma");
      person.setAge(20);
      person.setName(name);
      person.setAddress(address);
      System.out.println("The details");
      System.out.println(person.getAge());
      name=person.getName();
      System.out.println(name.getFirstName());
      System.out.println(name.getMiddleName());
      System.out.println(name.getLastName());
      address=person.getAddress();
      for(Address add : address){
        System.out.println(add.getHno());
        System.out.println(add.getStreetName());
        System.out.println(add.getLocality());
        System.out.println(add.getCity());
       }
   }
 }
 ---------------------------------------------------------------------------------
     
 public class PersonMain1b {
   public static void main(String args[]) {
      
      Address1 address[]=new Address1[2];
      Person1 person=new Person1();
      Name1 name=new Name1();
      String addressDetails1[][]={ {"A/122","Park Street","Central Kolkata","Kolkata"},
                                   {"111","Jawahar Street","Hind Market","Srinagar"} };  
                            
      for(int i=0;i<address.length;i++)
       {
          address[i]=new Address1();
          address[i].setHno(addressDetails[i][0]);
          address[i].setStreetName(adressDetails[i][1]);
          address[i].setLocality(addressDetails[i][2]);
          address[i].setCity(addressDetails[i][3]);
      }
   
      name.setFirstName("Raman");
      name.setMiddleName("Kumar");
      name.setLastName("Verma");
      person.setAge(20);
      person.setName(name);
      person.setAddress(address);
      System.out.println("The details");
      System.out.println(person.getAge());
      name=person.getName();
      System.out.println(name.getFirstName());
      System.out.println(name.getMiddleName());
      System.out.println(name.getLastName());
      address=person.getAddress();
      for(Address add : address){
        System.out.println(add.getHno());
        System.out.println(add.getStreetName());
        System.out.println(add.getLocality());
        System.out.println(add.getCity());
       }
   }
 }
-------------------------------------------------------------------------------------------------------
A person can have 2 addresses. We want to work with the details of 2 Persons.

   Person2 persons[]=new Person2[2];
---------------------------------------------------------------------------------------------------------

public class Author {
   private String name;
   private Address address;

}

public class Book{
   private int id;
   private String title;
   private String subject;
   private String language;
   private Author author;
}
public class Address{
  private String buildingNo;
  private String streetName;
  private String locality;
  private String city;
  private String country;
 }



public class Library {
    private String name;
    private String Address;
    private Book books[];

}


public class LibraryMain{
  public static void main(String args[]){

  }
} 
------------------------------------------------------------------------------------------------------------
public class Appointment{
  private int id;
  private String date;
public int getId() {
	return id;
}
public void setId(int id) {
	this.id = id;
}
public String getDate() {
	return date;
}
public void setDate(String date) {
	this.date = date;
}
  
  
}

public class Patient {
  private int age;
  private String name;
  private String gender;
  private Appointment appointment;
}

The above relationship is has a relationship between Patient and Appointment.
But that is not the correct approach of Patient having has a relationship
with the appointment

It can have use a relationship

public class Patient {
  private int age;
  private String name;
  private String gender;
 
   public void makeAppointment(Appointment app){
      Appointment appo=app;
      appo.setDate("11-Jun-2022");
      
      
   }

public int getAge() {
	return age;
}

public void setAge(int age) {
	this.age = age;
}

public String getName() {
	return name;
}

public void setName(String name) {
	this.name = name;
}

public String getGender() {
	return gender;
}

public void setGender(String gender) {
	this.gender = gender;
}
   
   
}


public class PatientMain {
  public static void main(String args[]){
   Appointment appointment=new Appointment();
   appointment.setId(1);
   System.out.println(appointment.getId());    // 1
   System.out.println(appointment.getDate());  // null

   Patient patient=new Patient();
   patient.setAge(30);
   patient.setName("Romesh");
   patient.setGender("Male");
   patient.makeAppointment(appointment);
   System.out.println("the details");
   System.out.println(patient.getAge());
   System.out.println(patient.getName());
   System.out.println(appointment.getId());  //1
   System.out.println(appointment.getDate()); //11-Jun-2022
 }
}
------------------------------------------------------------------------------------------------------------
We have an Item class. Item class is with id , itemname , unitprice.
We have a customer class with customerid,customername and mobilenumber.
the class Order will have itemList as an attribute.  
We have a Bill class with billid and a method called generatebill which will be passed with a customer's details and Itemlist and it will return the total bill amount ( Considering that we are asking for only one
item).

public class Item {
   private int id;
   private String itemName;
   private float unitPrice;

   //setters/getters
}

public class Customer {
   private String customerId;
   private String customerName;
   private long mobileNumber;
 // setters/getters
}

public class Order {
      private int orderId;
      private Item items[];  // Order and Items are related with HAS-A relationship. Order is having items.
    // getters/setters
 }

// Bill class is having uses relationship with Customer and Order because Customer and Order objects are not
// attribute but they are used in the method generateBill and passed as a parameter
public class Bill{
private int billId;

public double generateBill(Customer cust, Order order){
 double totalPrice;
}

}

import java.util.Scanner;
public class Main {
  public static void main(String args[]){
  Scanner scan=new Scanner(System.in);
  int numberOfItems;
  System.out.println("Enter the number of items");
  numberOfItems=scan.nextInt();
  Item items[]=new Items[numberOfItems];
  Customer customer=new Customer();
  Order order=new Order();
  double totalPrice=order.generateBill(customer,order); // The details of
// Customer should be shown with generateBill method and the details
// which we need to print is shown in the testcase.
  System.out.println(totalPrice);
 }
}
  TestCase
  Enter the number of items
  2
  Customer Id C0001
  Customer Name Ravi
  OrderId   1
  Item Details
  I001 Pen   10
  I002 Pencil 2
  Total Price: 12.00
  


---------------------------------------------------------------------------------------------------------
Employee is having two Addresses.

  public class Address{
   private int hno;
   private String streetName;
   private String cityName;

    public Address(int hno,String streetName, String cityName){
    this.hno=hno;
    this.streetName=streetName;
    this.cityName=cityName;
    }
   
 }

  public class Employee{
   private int id;
   private String name;
   private Address addresses[];
   
    public Employee(int id,String name, Address addresses[]){
     this.id=id;
     this.name=name;
     this.addresses=addresses;
    } 

  }


  public class EmployeeMain{
   public static void main(String args[]){
     Address address1=new Address(1,"Netaji Marg","Delhi");
     Address address2=new Address(2,"Ashok Nagar","Mumbai");
     Address addresses[]={address1,address2};
     Employee employee=new Employee(1,"Ram",addresses);
   }
  }
 ---------------------------------------------------------------------------------------------------------
 
  public class Customer {



  }


  public class Address {


  }

 public class Main {
   public static void main(String args[]) {
    Address address=new Address();
    Customer customer=new Customer();
    address.setHno();
    address.setCity():
    customer.setId();
    customer.setFirstName();
    customer.setAddress(address);
    System.out.println("The details");
    int id=customer.getId();
    String firstName=customer.getFirstName();
    address=customer.getAddress();
    int hno=address.getHno();
    System.out.println(hno);
    String city=address.getCity();
    System.out.println(city);
   }
}



https://www.geeksforgeeks.org/unified-modeling-language-uml-class-diagrams/

* Inheritance is for reusability of code.
* extends keyword is used for inheritance.
* private members of the Parent class are not inherited.
* default/protected/public members are inherited.
* With the object of child class we can access the public, protected and default member of the parent class.

  public class Parent1{
 
   public void displayParent(){
   System.out.println("I am a method in the Parent class");
   }
 }

 public class Child1 extends Parent1{
   public void displayChild(){
    System.out.println("I am a method in the Child class");
   }
}

  public class InheritDemo1{
    public static void main(String args[]){
      Parent1 parent=new Parent1();
      parent.displayParent();
      //parent.displayChild();
      Child1 child=new Child1();
      child.displayParent();
      child.displayChild();
     }
  }
 
 // Parent class object cannot access child class member whereas child class object can access the parent class members( condition 
is the members should not be private).

------------------------------------------------------------------------------------------------------------------------------------
Constructor call in inheritance.
* We have two types of constructors
  ** default or parameterless
  ** parameterized constructor

// parameterless constructor call
  public class Parent2 {
    private int num1;
   
    public int getNum1(){
     return num1;
    }
 }

  public class Child2 extends Parent2 {
    private int num2;
    
    public int getNum2(){
     return num2;      
    }
  }

   public class ParentChildMain2{
    public static void main(String args[]){
       Child2 child=new Child2();
       child.getNum1();   // 0
       child.getNum2();   //0
     }
   }

 // In the above example we have not defined any setter methods for num1 and num2 and we have also not mentioned any 
 // constructor . So the default constructor is provided during the compilation and that initialised num1 and num2 with 0.

--------------------------------------------------------------------------------------------------------------------------------


 public class Parent3 {
    private int num1;
   
     public Parent3(){
       num1=20;
       System.out.println("I am the parameterless constructor of parent");
   }
    public int getNum1(){
     return num1;
    }
 }

  public class Child3 extends Parent3 {
    private int num2;

    public Child3() {
      // super();  // this is called implicitly and meant for invoking the parent class parameterless constructor
       num2=200;
       System.out.println("I am the parameterless constructor of the Child class");
      }

    public int getNum2(){
     return num2;      
    }
  }

 public class ParentChildMain3{
    public static void main(String args[]){
       Child3 child=new Child3();
       System.out.println(child.getNum1());   // 20
       System.out.println(child.getNum2());   // 200
     }
   }

/* 
I am the parameterless constructor of parent
I am the parameterless constructor of the Child class
20
200
*/

By now, you have learnt that the derived classes inherit from the base class. You will now see how the child class object is created. As you all know, constructors are invoked while creating objects. When a child class object is created, the child class constructor invokes the parent class constructor before executing any statement present in the child constructor.
------------------------------------------------------------------------------------------------------------------
Parameterized constructor
// super is used represent the immediate parent class. So in our example
// Parent4 is the immediate parent class of Child4

 public class Parent4 {
    private int num1;
   
     public Parent4(int num1){
       this.num1=num1;
       System.out.println("I am the parameterized constructor of parent");
   }
    public int getNum1(){
     return num1;
    }
 }

  public class Child4 extends Parent4 {
    private int num2;

    public Child4(int num1,int num2) {
       super(num1); // we have to explicitly invoke the parent class parameterized constructor  
       this.num2=num2;
       System.out.println("I am the parameterized constructor of the Child class");
      }

    public int getNum2(){
     return num2;      
    }
  }

 public class ParentChildMain4{
    public static void main(String args[]){
       Child4 child=new Child4(100,200);
       System.out.println(child.getNum1());   // 100
       System.out.println(child.getNum2());   // 200
     }
   }

---------------------------------------
From the parameterized constructor of the child class if we dont make a call to the
parent class parameterized constructor, what will happen?



public class Parent5{
    private int num1;
   
     public Parent5(int num1){
       this.num1=num1;
       System.out.println("I am the parameterized constructor of parent");
   }
    public int getNum1(){
     return num1;
    }
 }

  public class Child5 extends Parent5 {
    private int num2;

    public Child5(int num1,int num2) {
      // super(num1); // we have to explicitly invoke the parent class parameterized constructor  
      // If we are not writing super(num1) explicitly , super() is carried out implicitly
       this.num2=num2;
       System.out.println("I am the parameterized constructor of the Child class");
      }

    public int getNum2(){
     return num2;      
    }
  }

 public class ParentChildMain5{
    public static void main(String args[]){
       Child5 child=new Child5(100,200);
       System.out.println(child.getNum1());   // 100
       System.out.println(child.getNum2());   // 200
     }
   }

// The above code will show compilation error as the parameterized constructor is
// trying to invoke the default constructor but we have not defined any default or
// parameterless constructor in the parent class.

Q So is the default constructor is not provided implicitly during compilation?
A Yes if non of the constructor is defined in the class but in the above example
we have one parameterized constructor in the parent class. That is the reason
compiler wont provide any parameterless constructor . We have to explicitly write
the parameterless constructor.



public class Parent6{
    private int num1;
    
     public Parent6(){
      num1=2000;
      System.out.println("I am the parameterless constructor of the Parent class");
     }

     public Parent6(int num1){
       this.num1=num1;
       System.out.println("I am the parameterized constructor of parent");
   }
    public int getNum1(){
     return num1;
    }
 }

  public class Child6 extends Parent6 {
    private int num2;

    public Child6(int num1,int num2) {
      // super(num1); // we have to explicitly invoke the parent class parameterized constructor  
      // If we are not writing super(num1) explicitly , super() is carried out implicitly
       this.num2=num2;
       System.out.println("I am the parameterized constructor of the Child class");
      }

    public int getNum2(){
     return num2;      
    }
  }

 public class ParentChildMain6{
    public static void main(String args[]){
       Child6 child=new Child6(100,200);
       System.out.println(child.getNum1());   // 2000
       System.out.println(child.getNum2());   // 200
     }
   }

// So calling or invoking the Parent class constructor should be the first line
// in the child class constructor otherwise it is a compilation error


   public Child(int num1, int num2){
   this.num2=num2;
   super(num1);
   }
  // So the above snippet shows that we cannot invoke base class constructor at any
other point of time. It has to be called in the first line of the Child class constructor.
The above code is with error.

---------------------------------
public class Employee{}
public class Educator{}

What we cannot write....

 public class Manager extends Employee,Educator{}
// We dont have the concept of a java class extending multiple classes or inheriting 
multiple classes.
    
  


