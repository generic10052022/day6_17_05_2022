/* public class Resource{

 public static int getMonth(String month){

   switch(month){
    case "Jan" : return 1;
    case "Feb" : return 2;
    default : return 0;

    }
 }

} */

 public class Resource{

 public static int getMonth(String month){
     int monthNumber=-1;
   switch(month){
    case "Jan" : monthNumber=1;
                 break;
    case "Feb" : monthNumber=2;
                 break;
    default :    monthNumber=0;

    }
   return monthNumber;
 }

} 

public ResourceMain{
   public static void main(String args[]){
    String monthName="Jan";
    //Resource res=new Resource();
    int monthNumber=Resource.getMonth(monthName);
    System.out.println(monthNumber);

   }

 }  
-----------------------------------------------------------------------------------------------------

Q We have seen how we can create an array of String objects. Is it possible to create objects for the userdefined classes like Employee/Student/Book etc?
Ans Yes .


 public class Employee {
   private int id;
   private String name;
   private String cityNames[];

   // setters/getters
 }

 public class EmployeeMain {
   public static void main(String args[]) {

  }
}
------------------------------------------------------------------------------------
Enter the details for two Employees 

 public class Employee {
   private int id;
   private String name;
   private String cityNames[];

   // setters/getters
 }

 public class EmployeeMain {
   public static void main(String args[]) {
    Employee emp1=new Employee();
    Employee emp2=new Employee();
  }
}
----------------------------------------------------------------------------------------------

 public class Employee {
   private int id;
   private String name;
   private String cityNames[];

   // setters/getters
 }

import java.util.Scanner;

public class EmployeeMain {
   public static void main(String args[]) {
   Employee employees[]=new Employee[2];  // We have created two reference variables to store two objects
   Scanner scan=new Scanner(System.in);
   String cityNames[]=new String[2];
   // of employee class 
   // int num[]=new int[2];
   // String str[]=new String[2];
   for(int i=0;i<employees.length;i++)
   {
	   System.out.println("Enter the id for the employee");
	   //int id=scan.nextInt();
	   // employees[i].setId(id);
	   employees[i].setId(scan.nextInt());
	  
	   System.out.println("Enter the name");
	   employees[i].setName(scan.next());
	   for(int j=0;j<cityNames.length;j++)
	   {
		   System.out.println("Enter the city name");
		   cityNames[j]=scan.next();
	   }
       employees[i].setCityNames(cityNames);
   
   }
   
  
  }
}


[ Enter the id for the employee
1
Exception in thread "main" java.lang.NullPointerException: Cannot invoke "Employee.setId(int)" because "employees[i]" is null
	at EmployeeMain.main(EmployeeMain.java:16)
]
-----------------------------------------------------------
The correct code:----

public class Employee {
   private int id;
   private String name;
   private String cityNames[];
public int getId() {
	return id;
}
public void setId(int id) {
	this.id = id;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String[] getCityNames() {
	return cityNames;
}
public void setCityNames(String[] cityNames) {
	this.cityNames = cityNames;
}

   // setters/getters
 }


import java.util.Scanner;

public class EmployeeMain {
   public static void main(String args[]) {
   Employee employees[]=new Employee[2];  // We have created two reference variables to store two objects
   Scanner scan=new Scanner(System.in);
   String cityNames[]=new String[2];
   // of employee class 
   // int num[]=new int[2];
   // String str[]=new String[2];
   for(int i=0;i<employees.length;i++)
   {
	   employees[i]=new Employee();
	   System.out.println("Enter the id for the employee");
	   //int id=scan.nextInt();
	   // employees[i].setId(id);
	   employees[i].setId(scan.nextInt());
	  
	   System.out.println("Enter the name");
	   employees[i].setName(scan.next());
	   for(int j=0;j<cityNames.length;j++)
	   {
		   System.out.println("Enter the city name");
		   cityNames[j]=scan.next();
	   }
       employees[i].setCityNames(cityNames);
   
   }
   for(Employee emp : employees)
   {
	   System.out.println(emp.getId());
	   System.out.println(emp.getName());
	   //System.out.println(emp.getCityNames());
       cityNames=emp.getCityNames();
       for(String cityName : cityNames)
       {
    	   System.out.println(cityName);
       }
   }
   
   
   
  
  }
}


-------------------------------------------------------------
Student class with 2 student objects, subjects will be same for all the 
students. make use of constructors,setters and getters and static method/static
members wherever required. Add a method called calculateAverage. which will
display the average score for the 3 subjects. 


public class Student {
 private int roll;
 private String name;
 private static String subjects[];
 private int marks[];

static {
/*   subjects=new String[3]{"English","Maths",Science"}; // Compilation error because we cannot provide the size for the array , if we are initialising it at the same time. */
  /* subjects=new String[3];
  subjects[0]="English";
  subjects[1]="Maths";
  subjects[2]="Science";
  The above 4 lines are correct for declaring and initialising */
  subjects[]=new String[]{"English","Maths","Science"}'
  /* The above line is correct for declaring and initialising the String array. */

  }

  // setters/getters methods

  void averageCalculate(){

   }

}

import java.util.Scanner;

public class StudentMain{
   public static void main(String args[]){
    Student students[]=new Student[2];
    Scanner scan=new Scanner(System.in);
   

 }
}

Where we find the difference between instance variables, static variables and local variables.

---------------------------------------------------------------------------------------------------------------Aggregation which is also known as Has-a relationship. 


Department is having a Manager.
public class Employee1{
private String empName;
private String empId;
private long contactNo;
private String address;
public String getEmpName() {
	return empName;
}
public void setEmpName(String empName) {
	this.empName = empName;
}
public String getEmpId() {
	return empId;
}
public void setEmpId(String empId) {
	this.empId = empId;
}
public long getContactNo() {
	return contactNo;
}
public void setContactNo(long contactNo) {
	this.contactNo = contactNo;
}
public String getAddress() {
	return address;
}
public void setAddress(String address) {
	this.address = address;
}

//setters/getters

}

public class Department {
private int deptId;
private String deptName;
private Employee1 manager;
public int getDeptId() {
	return deptId;
}
public void setDeptId(int deptId) {
	this.deptId = deptId;
}
public String getDeptName() {
	return deptName;
}
public void setDeptName(String deptName) {
	this.deptName = deptName;
}
public Employee1 getManager() {
	return manager;
}
public void setManager(Employee1 manager) {
	this.manager = manager;
}

//setters/getters

}

public class EmployeeDepartmentMain1 {
   public static void main(String args[]){
    Employee1 employee=new Employee1();
    Department dept=new Department();
    employee.setEmpId("E0001");
    employee.setEmpName("Gajendra");
    employee.setContactNo(9834533441L);
    employee.setAddress("A/122 Netaji Nagar Delhi");
    dept.setDeptId(1);
    dept.setDeptName("stores");
    dept.setManager(employee);
    System.out.println(dept.getDeptId());
    System.out.println(dept.getDeptName());
    System.out.println(dept.getManager()); // You wont be able to read the employeeDetails Employee1@cac736f
    employee=dept.getManager();
    System.out.println(employee.getEmpId());
    System.out.println(employee.getEmpName());
    System.out.println(employee.getContactNo());
    System.out.println(employee.getAddress());
   }
}  
----------------------------------------------------------------------------------------  
Design a class Person with instance variables age,name and address. Name will be a class with firstName,
middleName and lastName. Address will be a class with hno, streetName, locality, city, State.
public class Name {
  private String firstName;
  private String middleName;
  private String lastName;
  
  // setters/getters

}
public class Address{
  private String hno; // A/22
  prvate String streetName;
  private String locality;
  private String city;
  // setters/getters
}
public class Person  {
  private int age;
  private Name name;
  private Address address;
 // setters/getters
}

public class PersonMain {
   public static void main(String args[]) {

   }
}
  
---------------------------------------------------------------------------------------------------
A person can have 2 addresses. 
public class Name1 {
  private String firstName;
  private String middleName;
  private String lastName;
  
  // setters/getters

}



public class Person1  {
  private int age;
  private Name1 name;
  private Address1 address[];
 // setters/getters
}

public class Address1{
  private String hno; // A/22
  prvate String streetName;
  private String locality;
  private String city;
  // setters/getters
}


public class PersonMain1 {
   public static void main(String args[]) {
      Address1 address[]=new Address1[2];
      Person1 person=new Person1();
      Name1 name=new Name1();
      address[0]=new Address1();
      address[0].setHno("A/22");
      address[0].setStreetName("Park Street");
      address[0].setLocality("Central Kolkata");
      address[0].setCity("Kolkata");
      address[1]=new Address1();
      address[1].setHno("111");
      address[1].setStreetName("Jawahar Street");
      address[1].setLocality("Hind market");
      address[1].setCity("Srinagar");
      name.setFirstName("Raman");
      name.setMiddleName("Kumar");
      name.setLastName("Verma");
      person.setAge(20);
      person.setName(name);
      person.setAddress(address);
      System.out.println("The details");
      System.out.println(person.getAge());
      name=person.getName();
      System.out.println(name.getFirstName());
      System.out.println(name.getMiddleName());
      System.out.println(name.getLastName());
      address=person.getAddress();
      for(Address add : address){
        System.out.println(add.getHno());
        System.out.println(add.getStreetName());
        System.out.println(add.getLocality());
        System.out.println(add.getCity());
       }
   }
 }
 ---------------------------------------------------------------------------------
     
 public class PersonMain1b {
   public static void main(String args[]) {
      
      Address1 address[]=new Address1[2];
      Person1 person=new Person1();
      Name1 name=new Name1();
      String addressDetails1[][]={ {"A/122","Park Street","Central Kolkata","Kolkata"},
                                   {"111","Jawahar Street","Hind Market","Srinagar"} };  
                            
      for(int i=0;i<address.length;i++)
       {
          address[i]=new Address1();
          address[i].setHno(addressDetails[i][0]);
          address[i].setStreetName(adressDetails[i][1]);
          address[i].setLocality(addressDetails[i][2]);
          address[i].setCity(addressDetails[i][3]);
      }
   
      name.setFirstName("Raman");
      name.setMiddleName("Kumar");
      name.setLastName("Verma");
      person.setAge(20);
      person.setName(name);
      person.setAddress(address);
      System.out.println("The details");
      System.out.println(person.getAge());
      name=person.getName();
      System.out.println(name.getFirstName());
      System.out.println(name.getMiddleName());
      System.out.println(name.getLastName());
      address=person.getAddress();
      for(Address add : address){
        System.out.println(add.getHno());
        System.out.println(add.getStreetName());
        System.out.println(add.getLocality());
        System.out.println(add.getCity());
       }
   }
 }
-------------------------------------------------------------------------------------------------------
A person can have 2 addresses. We want to work with the details of 2 Persons.

   Person2 persons[]=new Person2[2];
---------------------------------------------------------------------------------------------------------

public class Author {
   private String name;
   private Address address;

}

public class Book{
   private int id;
   private String title;
   private String subject;
   private String language;
   private Author author;
}
public class Address{
  private String buildingNo;
  private String streetName;
  private String locality;
  private String city;
  private String country;
 }



public class Library {
    private String name;
    private String Address;
    private Book books[];

}


public class LibraryMain{
  public static void main(String args[]){

  }
} 
------------------------------------------------------------------------------------------------------------
public class Appointment{
  private int id;
  private String date;
public int getId() {
	return id;
}
public void setId(int id) {
	this.id = id;
}
public String getDate() {
	return date;
}
public void setDate(String date) {
	this.date = date;
}
  
  
}

public class Patient {
  private int age;
  private String name;
  private String gender;
  private Appointment appointment;
}

The above relationship is has a relationship between Patient and Appointment.
But that is not the correct approach of Patient having has a relationship
with the appointment

It can have use a relationship

public class Patient {
  private int age;
  private String name;
  private String gender;
 
   public Appointment makeAppointment(Appointment app){
      Appointment appo=app;
      appo.setDate("11-Jun-2022");
      return appo;
      
   }

public int getAge() {
	return age;
}

public void setAge(int age) {
	this.age = age;
}

public String getName() {
	return name;
}

public void setName(String name) {
	this.name = name;
}

public String getGender() {
	return gender;
}

public void setGender(String gender) {
	this.gender = gender;
}
   
   
}


public class PatientMain {
  public static void main(String args[]){
   Appointment appointment=new Appointment();
   appointment.setId(1);
   System.out.println(appointment.getId());    // 1
   System.out.println(appointment.getDate());  // null

   Patient patient=new Patient();
   patient.setAge(30);
   patient.setName("Romesh");
   patient.setGender("Male");
   Appointment appointment2=patient.makeAppointment(appointment);
   System.out.println("the details");
   System.out.println(patient.getAge());
   System.out.println(patient.getName());
   System.out.println(appointment2.getId());  //1
   System.out.println(appointment2.getDate()); //11-Jun-2022
 }
}

